// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mqtt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MqttServiceClient is the client API for MqttService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MqttServiceClient interface {
	NewClient(ctx context.Context, opts ...grpc.CallOption) (MqttService_NewClientClient, error)
}

type mqttServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMqttServiceClient(cc grpc.ClientConnInterface) MqttServiceClient {
	return &mqttServiceClient{cc}
}

func (c *mqttServiceClient) NewClient(ctx context.Context, opts ...grpc.CallOption) (MqttService_NewClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MqttService_serviceDesc.Streams[0], "/mqtt.MqttService/NewClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &mqttServiceNewClientClient{stream}
	return x, nil
}

type MqttService_NewClientClient interface {
	Send(*DataPacket) error
	Recv() (*DataPacket, error)
	grpc.ClientStream
}

type mqttServiceNewClientClient struct {
	grpc.ClientStream
}

func (x *mqttServiceNewClientClient) Send(m *DataPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mqttServiceNewClientClient) Recv() (*DataPacket, error) {
	m := new(DataPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MqttServiceServer is the server API for MqttService service.
// All implementations must embed UnimplementedMqttServiceServer
// for forward compatibility
type MqttServiceServer interface {
	NewClient(MqttService_NewClientServer) error
	mustEmbedUnimplementedMqttServiceServer()
}

// UnimplementedMqttServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMqttServiceServer struct {
}

func (UnimplementedMqttServiceServer) NewClient(MqttService_NewClientServer) error {
	return status.Errorf(codes.Unimplemented, "method NewClient not implemented")
}
func (UnimplementedMqttServiceServer) mustEmbedUnimplementedMqttServiceServer() {}

// UnsafeMqttServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MqttServiceServer will
// result in compilation errors.
type UnsafeMqttServiceServer interface {
	mustEmbedUnimplementedMqttServiceServer()
}

func RegisterMqttServiceServer(s grpc.ServiceRegistrar, srv MqttServiceServer) {
	s.RegisterService(&_MqttService_serviceDesc, srv)
}

func _MqttService_NewClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MqttServiceServer).NewClient(&mqttServiceNewClientServer{stream})
}

type MqttService_NewClientServer interface {
	Send(*DataPacket) error
	Recv() (*DataPacket, error)
	grpc.ServerStream
}

type mqttServiceNewClientServer struct {
	grpc.ServerStream
}

func (x *mqttServiceNewClientServer) Send(m *DataPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mqttServiceNewClientServer) Recv() (*DataPacket, error) {
	m := new(DataPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MqttService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mqtt.MqttService",
	HandlerType: (*MqttServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewClient",
			Handler:       _MqttService_NewClient_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mqtt.proto",
}
